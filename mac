#!/bin/sh

# Welcome to the civil laptop script!
# Be prepared to turn your laptop (or desktop, no haters here)
# into an awesome development machine.

fancy_echo() {
  local fmt="$1"; shift

  printf "\n$fmt\n" "$@"
}

append_to_zshrc() {
  local text="$1" zshrc
  local skip_new_line="${2:-0}"

  zshrc="$HOME/.zshrc"

  if ! grep -Fqs "$text" "$zshrc"; then
    if [ "$skip_new_line" -eq 1 ]; then
      printf "%s\n" "$text" >> "$zshrc"
    else
      printf "\n%s\n" "$text" >> "$zshrc"
    fi
  fi
}


install_homebrew() {
  HOMEBREW_PREFIX="/usr/local"

  if [ -d "$HOMEBREW_PREFIX" ]; then
    if ! [ -r "$HOMEBREW_PREFIX" ]; then
        sudo chown -R "$LOGNAME:admin" /usr/local
    fi
    else
    sudo mkdir "$HOMEBREW_PREFIX"
    sudo chflags norestricted "$HOMEBREW_PREFIX"
    sudo chown -R "$LOGNAME:admin" "$HOMEBREW_PREFIX"
    fi

    if ! command -v brew >/dev/null; then
    fancy_echo "Installing Homebrew ..."
        curl -fsS \
        'https://raw.githubusercontent.com/Homebrew/install/master/install' | ruby

        append_to_zshrc '# recommended by brew doctor'

        append_to_zshrc 'export PATH="/usr/local/bin:$PATH"' 1

        export PATH="/usr/local/bin:$PATH"
    fi

    if brew list | grep -Fq brew-cask; then
    fancy_echo "Uninstalling old Homebrew-Cask ..."
    brew uninstall --force brew-cask
    fi

    fancy_echo "Updating Homebrew formulae ..."
    brew update --force
    brew bundle --file=- <<EOF
    tap "thoughtbot/formulae"
    tap "homebrew/services"

    # Unix
    brew "autoconf"
    brew "automake"
    brew "coreutils"
    brew "libtool"
    brew "openssl"
    brew "unixodbc"

    # Shell
    brew "rcm"
    brew "reattach-to-user-namespace"
    brew "tmux"
    brew "tree"
    brew "zsh"
    brew "zsh-completions"

    # Development tools
    brew "adr-tools"
    brew "git"
    brew "hub"
    brew "the_silver_searcher"
    brew "watchman"

    # Heroku
    brew "heroku/brew/heroku"
    brew "parity"

    # Image manipulation
    brew "imagemagick"

    # Programming languages
    brew "elixir"
    brew "libxslt"
    brew "libyaml" # should come after openssl
    brew "readline"

    # Erlang dependencies
    brew "wxmac"

    # Desktop Apps
    cask "1password"
    cask "atom"
    cask "google-drive-file-stream"
    cask "google-chrome"
    cask "gpg-suite"
    cask "iterm2"
    cask "keybase"
    cask "postman"
    cask "slack"
    cask "sourcetree"
    cask "zoomus"
    EOF
}

update_shell() {
  local shell_path;
  shell_path="$(which zsh)"

  fancy_echo "Changing your shell to zsh ..."
  if ! grep "$shell_path" /etc/shells > /dev/null 2>&1 ; then
    fancy_echo "Adding '$shell_path' to /etc/shells"
    sudo sh -c "echo $shell_path >> /etc/shells"
  fi
  sudo chsh -s "$shell_path" "$USER"
}


prepare_folders() {
  if [ ! -d "$HOME/.bin/" ]; then
    mkdir "$HOME/.bin"
  fi

  if [ ! -f "$HOME/.zshrc" ]; then
    touch "$HOME/.zshrc"
  fi

  # Setup Development directory. This is where all CivilCode development takes place.
  if [ ! -d "$HOME/Development" ]; then
    mkdir ~/Development
  fi

  if [ -f "$HOME/.laptop.local" ]; then
    fancy_echo "Running your customizations from ~/.laptop.local ..."
    . "$HOME/.laptop.local"
  fi
}

prepare_zshrc() {
  append_to_zshrc 'export PATH="$HOME/.bin:$PATH"'

  case "$SHELL" in
    */zsh)
      if [ "$(which zsh)" != '/usr/local/bin/zsh' ] ; then
        update_shell
      fi
      ;;
    *)
      update_shell
      ;;
  esac
}

# Atom packages and config
setup_atom(){
 apm install Sublime-Style-Column-Selection atom-elixir language-elixir

 cat <<EOF > ~/.atom/config.cson
 "*":
   core:
     audioBeep: false
     closeEmptyWindows: false
     telemetryConsent: "no"
     ignoredNames: [
       ".git"
       ".hg"
       ".svn"
       ".DS_Store"
       "._*"
       "Thumbs.db"
       "desktop.ini"
       "**/cover/*.html"
       "**/doc/*.html"
     ]
   editor:
     autoIndentOnPaste: false
     preferredLineLength: 100
     showInvisibles: true
   welcome:
     showOnStartup: false
   whitespace:
     ignoreWhitespaceOnCurrentLine: false
 EOF
}

install_oh_my_zsh() {
  if [ ! -d "$HOME/.oh-my-zsh/" ]; then
    sh -c "$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"
  fi
}

setup_pairing_account() {
  #Prepend zsh with ZSH_DISABME_COMPFIX setting
  printf '%s\n%s\n' "ZSH_DISABLE_COMPFIX=true" "$(cat ~/.zshrc)" > ~/.zshrc

  # TODO: change /usr/local/bin/zsh to /bin/zsh
  sudo chsh -s $(whereis zsh) "$USER"
}

##########
## SCRIPT
##########

trap 'ret=$?; test $ret -ne 0 && printf "failed\n\n" >&2; exit $ret' EXIT

set -e

prepare_folders
prepare_zshrc
install_oh_my_zsh

if $1 == "ANOTHER_USER=1"; then
  setup_pairing_account
else
  install_homebrew
fi

setup_atom
